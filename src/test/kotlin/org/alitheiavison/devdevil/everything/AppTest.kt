/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.alitheiavison.devdevil.everything

import org.alitheiavison.devdevil.everything.parser.*
import kotlin.test.Test
import kotlin.test.assertTrue

class AppTest {
    @ExperimentalUnsignedTypes
    @Test
    fun testBytesToString() {
        val hexa = "4546492050415254000001005C000000EE61D968000000000100000000000000FF0F9D3B00000000220000000000000" +
                "0DE0F9D3B000000007E21F042E03EFF43986EEE569799656502000000000000008000000080000000A85ADF1800000000"
        assertTrue { hexa == HexaBuffer.toHexaString(gptHeader) }
    }

    @Test
    fun testBit() {
        assertTrue { FlagOfDword(3).isSetBit(0b0010) }
        assertTrue { FlagOfDword(8).isSetBit(0b111111) }
    }

    @ExperimentalUnsignedTypes
    @Test
    fun testDefinitionFromFile() {
        val def = Definition(specOfGptHeader, "gptHeader")
        val gptHeader = FileHandler.readAll("src/test/resources/gpt.bin")
        val buffer = HexaBuffer(gptHeader)
        val report = Parser(def).parse(buffer) ?: return assertTrue { false }

        var field = report.getFiled("version") ?: return assertTrue { false }
        assertTrue { (field.value as UnsignedDword).value == 65536u }

        field = report.getFiled("Size of header") ?: return assertTrue { false }
        assertTrue { (field.value as UnsignedDword).value == 92u }
        field = report.getFiled("crc32 of header") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "68D961EE" }
        field = report.getFiled("LBA of GPT header copy") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "000000003B9D0FFF" }
        field = report.getFiled("Disk GUID") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "42F0217E-3EE0-43FF-986E-EE5697996565" }
    }

    @ExperimentalUnsignedTypes
    @Test
    fun testDefinition() {
        val def = Definition(specOfGptHeader, "gptHeader")
        val buffer = HexaBuffer(gptHeader)
        val report = Parser(def).parse(buffer) ?: return assertTrue { false }

        var field = report.getFiled("version") ?: return assertTrue { false }
        assertTrue { (field.value as UnsignedDword).value == 65536u }

        field = report.getFiled("Size of header") ?: return assertTrue { false }
        assertTrue { (field.value as UnsignedDword).value == 92u }
        field = report.getFiled("crc32 of header") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "68D961EE" }
        field = report.getFiled("LBA of GPT header copy") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "000000003B9D0FFF" }
        field = report.getFiled("Disk GUID") ?: return assertTrue { false }
        assertTrue { (field.value as StringValue).value == "42F0217E-3EE0-43FF-986E-EE5697996565" }
    }

    companion object {
        //        00000200: 4546 4920 5041 5254 0000 0100 5c00 0000  EFI PART....\...
        //        00000210: ee61 d968 0000 0000 0100 0000 0000 0000  .a.h............
        //        00000220: ff0f 9d3b 0000 0000 2200 0000 0000 0000  ...;....".......
        //        00000230: de0f 9d3b 0000 0000 7e21 f042 e03e ff43  ...;....~!.B.>.C
        //        00000240: 986e ee56 9799 6565 0200 0000 0000 0000  .n.V..ee........
        //        00000250: 8000 0000 8000 0000 a85a df18 0000 0000  .........Z......
        @ExperimentalUnsignedTypes
        val specOfGptHeader = arrayOf(
                Spec(8, Type.String, "Signature"),
                Spec(4, Type.UnSigned, "version"),
                Spec(4, Type.UnSigned, "Size of header"),
                Spec(4, Type.Hexa, "crc32 of header"),
                Spec(4, Type.Signed, "reserved"),
                Spec(8, Type.Hexa, "LBA of current"),
                Spec(8, Type.Hexa, "LBA of GPT header copy"),
                Spec(8, Type.Hexa, "LBA of first usable"),
                Spec(8, Type.Hexa, "LBA of last usable"),
                Spec(16, Type.UUID, "Disk GUID"),
                Spec(8, Type.Signed, "LBA of partition entries starting"),
                Spec(4, Type.UnSigned, "Number of partition entries"),
                Spec(4, Type.UnSigned, "Size of partition entry"),
                Spec(4, Type.Hexa, "crc32 of partition entry")
        )

        @ExperimentalUnsignedTypes
        val gptHeader = ubyteArrayOf(
                0x45u, 0x46u, 0x49u, 0x20u, 0x50u, 0x41u, 0x52u, 0x54u, // Signature
                0x00u, 0x00u, 0x01u, 0x00u, // version
                0x5cu, 0x00u, 0x00u, 0x00u, // size of header
                0xeeu, 0x61u, 0xd9u, 0x68u, // crc32 of header
                0x00u, 0x00u, 0x00u, 0x00u, // reserved
                0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // LBA of current
                0xffu, 0x0fu, 0x9du, 0x3bu, 0x00u, 0x00u, 0x00u, 0x00u, // LBA of header copy
                0x22u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // LBA of first usable
                0xdeu, 0x0fu, 0x9du, 0x3bu, 0x00u, 0x00u, 0x00u, 0x00u, // LBA of last usable
                // 42F0217E-3EE0-43FF-986E-EE5697996565
                0x7eu, 0x21u, 0xf0u, 0x42u, 0xe0u, 0x3eu, 0xffu, 0x43u, // Disk GUID
                0x98u, 0x6eu, 0xeeu, 0x56u, 0x97u, 0x99u, 0x65u, 0x65u,
                0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // LBA of entries
                0x80u, 0x00u, 0x00u, 0x00u, // number of entry
                0x80u, 0x00u, 0x00u, 0x00u, // size of partition
                0xa8u, 0x5au, 0xdfu, 0x18u, // crc32 of partition entry
                0x00u, 0x00u, 0x00u, 0x00u
        )
    }
}
